(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{284:function(t,a,s){"use strict";s.r(a);var e=s(28),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"big-o-notation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#big-o-notation"}},[t._v("#")]),t._v(" Big O Notation")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#time-complexity"}},[t._v("Time Complexity")])]),s("li",[s("a",{attrs:{href:"#space-complexity"}},[t._v("Space Complexity")]),s("ul",[s("li",[s("a",{attrs:{href:"#example-1"}},[t._v("Example 1")])]),s("li",[s("a",{attrs:{href:"#example-2"}},[t._v("Example 2")])])])]),s("li",[s("a",{attrs:{href:"#drop-the-constants"}},[t._v("Drop the constants")]),s("ul",[s("li",[s("a",{attrs:{href:"#example-3"}},[t._v("Example 3")])])])]),s("li",[s("a",{attrs:{href:"#drop-the-non-dominant-terms"}},[t._v("Drop the non-dominant terms")])]),s("li",[s("a",{attrs:{href:"#multi-part-algorithms"}},[t._v("Multi-part algorithms")]),s("ul",[s("li",[s("a",{attrs:{href:"#add-the-runtimes-o-a-b"}},[t._v("Add the runtimes: O(A + B)")])]),s("li",[s("a",{attrs:{href:"#multiply-the-runtimes-o-a-b"}},[t._v("Multiply the runtimes: O(A * B)")])])])]),s("li",[s("a",{attrs:{href:"#amortized-time"}},[t._v("Amortized Time")])]),s("li",[s("a",{attrs:{href:"#log-n-runtimes"}},[t._v("Log N Runtimes")])]),s("li",[s("a",{attrs:{href:"#recursive-runtimes"}},[t._v("Recursive Runtimes")])])])]),s("p"),t._v(" "),s("p",[t._v("[TOC]")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("The language and metric used to describe the efficiency of algorithms.")]),t._v(" "),s("p",[t._v("Consider this scenario:")]),t._v(" "),s("ul",[s("li",[t._v("A file on a hard drive that needs to be sent to a friend who lives across the country")]),t._v(" "),s("li",[t._v("Options:\n"),s("ul",[s("li",[t._v("Small file:\n"),s("ul",[s("li",[t._v("Email, FTP, electronic transfer")])])]),t._v(" "),s("li",[t._v("Large file (1 TB+):\n"),s("ul",[s("li",[t._v("It is faster to send physically (via airplane or drive)")])])])])])]),t._v(" "),s("h2",{attrs:{id:"time-complexity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#time-complexity"}},[t._v("#")]),t._v(" Time Complexity")]),t._v(" "),s("p",[t._v("-- Asymptotic runtime (big O time)")]),t._v(" "),s("ul",[s("li",[t._v("Electronic transfer: O(s), where 's' is the size of the file\n"),s("ul",[s("li",[t._v("The time to transfer the file increases linearly with the size of the file")])])]),t._v(" "),s("li",[t._v("Airplane transfer: O(1), with respect to the size of the file.\n"),s("ul",[s("li",[t._v("As the size of the file increases, it won't take any longer to get the file to friend. The time is constant")])])])]),t._v(" "),s("h2",{attrs:{id:"space-complexity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#space-complexity"}},[t._v("#")]),t._v(" Space Complexity")]),t._v(" "),s("p",[t._v("-- Amount of memory (or space) required by an algo")]),t._v(" "),s("ul",[s("li",[t._v("Array of size 'n' requires O(n) space")]),t._v(" "),s("li",[t._v("2D array of size 'n' * n' requires O(n^2) space")])]),t._v(" "),s("h3",{attrs:{id:"example-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-1"}},[t._v("#")]),t._v(" Example 1")]),t._v(" "),s("p",[t._v("Stack space in recursive calls -- O(n) time and O(n) space:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Each call adds a level to the stack")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sum(4)\n  -> sum(3)\n    -> sum(2)\n      -> sum(1)\n        -> sum(0)\n")])])]),s("p",[t._v("Each of these calls is added to the call stack and takes up actual memory.")]),t._v(" "),s("h3",{attrs:{id:"example-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[t._v("#")]),t._v(" Example 2")]),t._v(" "),s("p",[t._v("O(n) time, O(1) space")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pairSumSequence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pairSum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pairSum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("There will be O(n) calls to "),s("code",[t._v("pairSum")]),t._v(". But these calls do not exist simultaneously on the call stack, so you only need O(1) space.")]),t._v(" "),s("h2",{attrs:{id:"drop-the-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#drop-the-constants"}},[t._v("#")]),t._v(" Drop the constants")]),t._v(" "),s("p",[t._v("It is possible for O(n) code to run faster than O(1) code for specific inputs. Big O just describes the rate of increase.")]),t._v(" "),s("p",[t._v("For this reason, constants are dropped in runtime. An algo that might be described as O(2n) is actually O(n).")]),t._v(" "),s("h3",{attrs:{id:"example-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-3"}},[t._v("#")]),t._v(" Example 3")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MIN_VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x : array denotes 'for each'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MIN_VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Which one is faster? This question might only be answered at the assembly level and compiler optimization.")]),t._v(" "),s("h2",{attrs:{id:"drop-the-non-dominant-terms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#drop-the-non-dominant-terms"}},[t._v("#")]),t._v(" Drop the non-dominant terms")]),t._v(" "),s("p",[t._v("O(n^2 + n) should be just O(n^2) O(n + log n) becomes O(n) O(5*2^n + 1000n^100) becomes O(2^n)")]),t._v(" "),s("p",[t._v("However, the expression: O(b^2 + a) cannot be reduced (without some special knowledge of 'a' and 'b').")]),t._v(" "),s("p",[t._v("Big O time describes the rate of increase!")]),t._v(" "),s("h2",{attrs:{id:"multi-part-algorithms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multi-part-algorithms"}},[t._v("#")]),t._v(" Multi-part algorithms")]),t._v(" "),s("p",[t._v("When to multiply runtimes vs add?")]),t._v(" "),s("h3",{attrs:{id:"add-the-runtimes-o-a-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add-the-runtimes-o-a-b"}},[t._v("#")]),t._v(" Add the runtimes: O(A + B)")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" arrA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" arrB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("Do A chunks of work, then B chunks of work")])]),t._v(" "),s("h3",{attrs:{id:"multiply-the-runtimes-o-a-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multiply-the-runtimes-o-a-b"}},[t._v("#")]),t._v(" Multiply the runtimes: O(A * B)")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" arrA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" arrB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("Do B chunks of work for each element in A")])]),t._v(" "),s("h2",{attrs:{id:"amortized-time"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amortized-time"}},[t._v("#")]),t._v(" Amortized Time")]),t._v(" "),s("p",[t._v("Consider an "),s("code",[t._v("ArrayList")]),t._v(" which grows in capacity as elements are inserted. When it hits capacity, a new array with double capacity is created and all the elements are copied over.")]),t._v(" "),s("p",[t._v("If the array is full, and it contains 'N' elements, then inserting a new element will take O(N) time. Creating a new array will be size 2N. However, the vast majority of the time, inserting an element will be O(1) time.")]),t._v(" "),s("p",[t._v("'Amortized time' states that this phenomenom only happens very rarely, so the cost is 'amortized.'")]),t._v(" "),s("p",[t._v("As elements are inserted, capacity is doubled when size of array is a power of 2. So after X elements, capacity doubles at array sizes 1, 2, 4, 8, 16, ..., X. The doubling takes 1, 2, 4, 8, 16, ..., X copies. Sum of 1 + 2 + 4 + 8 + ... + X is roughy 2X.")]),t._v(" "),s("p",[t._v("X insertions takes O(2X) time, amortized time for each insertion is O(1).")]),t._v(" "),s("h2",{attrs:{id:"log-n-runtimes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#log-n-runtimes"}},[t._v("#")]),t._v(" Log N Runtimes")]),t._v(" "),s("p",[t._v("Suppose we have a sorted array, and we are trying to find a number inside using binary search. We first compare the number to the midpoint of the array, if "),s("code",[t._v("x == middle")]),t._v(" we return it. If "),s("code",[t._v("x < middle")]),t._v(" we search left; if "),s("code",[t._v("x > middle")]),t._v(" we search right.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  search 9 within [1, 5, 8, 9, 11, 13, 15, 19, 21]\n    compare 9 to 11 -> smaller\n    search 9 within [1, 5, 8, 9, 11]\n      compare 9 to 8 -> bigger\n      search 9 within [9, 11]\n        compare 9 to 9\n        return\n")])])]),s("p",[t._v("Start off N-element array to search. After a single step, we're down to N/2 elements. Another step and we're down N/4 elements.")]),t._v(" "),s("p",[t._v("Total runtime is how many steps (dividing N by 2 each time) until N becomes 1:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("N = 16\nN = 8   // Divide by 2\nN = 4   // Divide by 2\nN = 2   // Divide by 2\nN = 1   // Divide by 2\n")])])]),s("p",[t._v("Now flipped, we can go from 1 to 16, how many times we can multiply 1 by 2 until we get N?")]),t._v(" "),s("p",[t._v("This is "),s("code",[t._v("2^k = N")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("2^4 = 16 -> log2 16 = 4\nlog2 N = k -> 2^k = N\n")])])]),s("p",[t._v("If the number of elements in the problem space gets halved each time, that will likely be a O(log N) runtime.")]),t._v(" "),s("h2",{attrs:{id:"recursive-runtimes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#recursive-runtimes"}},[t._v("#")]),t._v(" Recursive Runtimes")]),t._v(" "),s("p",[t._v("Consider")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("This tree will have depth N. Each (node) function call has 2 children. Therefore each level will have twice as many calls as the one above it.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Level")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("# Nodes")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Also expressed as...")]),t._v(" "),s("th",{staticStyle:{"text-align":"right"}},[t._v("Or...")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("2^0")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2 * previous level = 2")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("2^1")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2 "),s("em",[t._v("previous level = 2")]),t._v(" 2^1 = 2^2")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("2^2")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2 "),s("em",[t._v("previous level = 2")]),t._v(" 2^2 = 2^3")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("2^3")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2 "),s("em",[t._v("previous level = 2")]),t._v(" 2^3 = 2^4")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("2^4")])])])]),t._v(" "),s("p",[t._v("The runtime for a recursive function making multiple calls: O(branches^depth), where branches is the number of times each recursive call branches. In this case, O(2^N).")]),t._v(" "),s("p",[t._v("(Side note: the sum of a sequence of powers of two is roughly equal to the "),s("em",[t._v("next")]),t._v(" value in the sequence.)")]),t._v(" "),s("p",[t._v("Big O time describes the rate of increase!"),s("br"),t._v(" "),s("em",[t._v("Big O time describes the rate of increase!")]),s("br"),t._v(" "),s("strong",[t._v("Big O time describes the rate of increase!")]),s("br"),t._v(" "),s("em",[s("strong",[t._v("Big O time describes the rate of increase!")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);