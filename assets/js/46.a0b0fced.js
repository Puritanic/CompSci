(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{467:function(s,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"shell-programmming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-programmming"}},[s._v("#")]),s._v(" Shell programmming")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#shebang"}},[s._v("Shebang")])]),a("li",[a("a",{attrs:{href:"#variables"}},[s._v("Variables")]),a("ul",[a("li",[a("a",{attrs:{href:"#local-variables"}},[s._v("Local variables")])])])]),a("li",[a("a",{attrs:{href:"#tests"}},[s._v("Tests")])]),a("li",[a("a",{attrs:{href:"#if-statements"}},[s._v("If statements")])]),a("li",[a("a",{attrs:{href:"#for-loop"}},[s._v("For loop")])]),a("li",[a("a",{attrs:{href:"#positional-parameters"}},[s._v("Positional parameters")])]),a("li",[a("a",{attrs:{href:"#accepting-user-input-stdin"}},[s._v("Accepting User Input (STDIN)")])]),a("li",[a("a",{attrs:{href:"#exit-statuses"}},[s._v("Exit statuses")])]),a("li",[a("a",{attrs:{href:"#and"}},[s._v("&& AND ||")])]),a("li",[a("a",{attrs:{href:"#the-semicolon"}},[s._v("The semicolon")])]),a("li",[a("a",{attrs:{href:"#functions"}},[s._v("Functions")]),a("ul",[a("li",[a("a",{attrs:{href:"#creating-a-function"}},[s._v("Creating a function")])]),a("li",[a("a",{attrs:{href:"#calling-a-function"}},[s._v("Calling a function")])]),a("li",[a("a",{attrs:{href:"#function-exit-statuses-aka-return-codes"}},[s._v("Function exit statuses aka return codes")])])])]),a("li",[a("a",{attrs:{href:"#wildcards"}},[s._v("Wildcards")])]),a("li",[a("a",{attrs:{href:"#character-classes"}},[s._v("Character Classes")])]),a("li",[a("a",{attrs:{href:"#case-statements"}},[s._v("Case statements")])]),a("li",[a("a",{attrs:{href:"#logging"}},[s._v("Logging")])]),a("li",[a("a",{attrs:{href:"#while-loops"}},[s._v("While loops")])]),a("li",[a("a",{attrs:{href:"#debugging-shellscript"}},[s._v("Debugging shellscript")])]),a("li",[a("a",{attrs:{href:"#debugging-startup-time"}},[s._v("Debugging startup time")])]),a("li",[a("a",{attrs:{href:"#reference-related"}},[s._v("Reference/Related")])])])]),a("p"),s._v(" "),a("p",[s._v("[TOC]")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[s._v("Contains series of the commands")]),s._v(" "),a("li",[s._v("An interpreter executes commands in the script")]),s._v(" "),a("li",[s._v("Anything you can type in command line you can put in the script")]),s._v(" "),a("li",[s._v("They're great for automating tasks")])]),s._v(" "),a("p",[s._v("Before running scripts, we need to set up permissions for execution with:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("755")]),s._v(" script.sh\n")])])]),a("p",[s._v("We can run then script with "),a("code",[s._v("./script.sh")]),s._v(" in command line.")]),s._v(" "),a("h2",{attrs:{id:"shebang"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shebang"}},[s._v("#")]),s._v(" Shebang")]),s._v(" "),a("p",[a("code",[s._v("#!")]),s._v(" (shebang) Specifies binary of the shell(interpreter) we want to execute script, for example: "),a("code",[s._v("#! /bin/bash")]),s._v(" or "),a("code",[s._v("#! /bin/zsh")])]),s._v(" "),a("p",[s._v("When we execute the script that contains "),a("code",[s._v("#!")]),s._v(" what actually happens is that interpreter is executed and path used to call the script is passed as an argument. With "),a("code",[s._v("sleepy.sh")]),s._v(" example we can run script with "),a("code",[s._v("./sleepy.sh &")]),s._v(", where "),a("code",[s._v("&")]),s._v(" is used (it seems) to return the PID of the script execution process, and then we can run "),a("code",[s._v("ps -fp [PID]")]),s._v(" to see process info:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v(" PID "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PPID")]),s._v(" C STIME TTY TIME CMD\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("505")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65418")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("59985")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(":09PM ttys000 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.01 /bin/zsh ./sleepy.sh\n")])])]),a("p",[s._v("If a script doesn't contain "),a("code",[s._v("#!")]),s._v(" commands are executed with default shell, but it's the best practice to be explicit as different shells have slightly varying syntax.")]),s._v(" "),a("p",[s._v("Also, we dont have to use only shells as interpreters for scripts. We can also use other binaries like "),a("code",[s._v("python")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#! /usr/bin/python")]),s._v("\n\nprint "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is a Python script"')]),s._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("chmod 755 hi.py\n./hi.py\nThis is a Python script\n")])])]),a("h2",{attrs:{id:"variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[s._v("#")]),s._v(" Variables")]),s._v(" "),a("p",[s._v("Are storage locations that have name, you can think of them as name-value pairs. Syntax used to create a variable is: "),a("code",[s._v('VARIABLE_NAME="Value"')]),s._v(". It's important to note that variable names are case sensitive, and that, by convention, variable names should be all in uppercase. Also make sure to not use spaces after and before "),a("code",[s._v("=")]),s._v(" sign, when declaring variable.")]),s._v(" "),a("p",[a("strong",[s._v("By default all variables are global, also they have to be defined before used.")]),s._v(" Variables can be defined in the "),a("a",{attrs:{href:"###Functions"}},[s._v("functions")]),s._v(", but we cannot access them before function is called.")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("var")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("GLOBAL_VAR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# GLOBAL_VAR is not defined at this point and this will not return anything")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GlOBAL_VAR")]),s._v("\nvar\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# GLOBAL_VAR is now available, because function has been called")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GlOBAL_VAR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Output: 1")]),s._v("\n")])])]),a("p",[s._v("Valid variable names can consist of letters, numbers and underscores, except that number cannot be the first char in the name.")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Valid names")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DARK_JEDI")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Vader"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("GR4Y_J3DI")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ashoka"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Regular_Jedi")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Obi-Wan"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Invalid names")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("2DARK_LORDS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Vader & Sidius"')]),s._v("\nONE-REBEL"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Han Solo"')]),s._v("\nONE@SHIP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ebon Hawk"')]),s._v("\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#! /bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MY_SHELL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zsh"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I like the '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$MY_SHELL")]),s._v(' shell"')]),s._v("\n")])])]),a("p",[s._v("We can also enclose variable name in curly braces:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MY_SHELL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zsh"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I like the '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${MY_SHELL}")]),s._v(' shell"')]),s._v("\n")])])]),a("p",[s._v("Curly braces syntax is optional unless you need to preeced or follow up the variable wit additional data, like so:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MY_SHELL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bash"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"I'm "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${MY_SHELL}")]),s._v('ing on my keyboard!"')]),s._v("\n")])])]),a("p",[s._v("Output: "),a("code",[s._v("I'm bashing on my keyboard")]),s._v(". Without curly braces this wouldn't work as the interpreter will take that "),a("code",[s._v("ing")]),s._v(" following the name variable as a part of the variable name.")]),s._v(" "),a("p",[s._v("We can also assign the output of the command to a variable:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("SERVER_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hostname")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You are running this script on '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${SERVER_NAME}")]),s._v('"')]),s._v("\n")])])]),a("p",[s._v("We can also use "),a("code",[s._v("SERVER_NAME=`hostname`")]),s._v(" which is a older syntax today mainly replaced with "),a("code",[s._v("${}")]),s._v(".")]),s._v(" "),a("h3",{attrs:{id:"local-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#local-variables"}},[s._v("#")]),s._v(" Local variables")]),s._v(" "),a("p",[s._v("Local vars are created with "),a("code",[s._v("local")]),s._v(" keyword, and "),a("strong",[s._v("only functions can have the local variables")]),s._v(", so they can only be accessed within the function where they're declared.")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("LOCAL_VAR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I\'m locally scoped"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("It's the best practice to use only local variables inside functions.")]),s._v(" "),a("h2",{attrs:{id:"tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tests"}},[s._v("#")]),s._v(" Tests")]),s._v(" "),a("p",[s._v("With tests we can check for example: if file exists, if number is greater than another, compare if strings are equal...")]),s._v(" "),a("p",[s._v("Syntax:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("contidion-to-test-for"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("Example:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-e /etc/passwd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("this tests if "),a("code",[s._v("etc/passwd")]),s._v(" exists, and if it does this returns "),a("code",[s._v("true")]),s._v(" - command exit status of "),a("code",[s._v("0")]),s._v(", if it doesn't exists the command exits with the exit status of "),a("code",[s._v("1")]),s._v(". Some file operators:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("-d FILE "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the file is a directory")]),s._v("\n-e FILE "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if file exists")]),s._v("\n-f FILE "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the file exists and it's regular file")]),s._v("\n-r FILE "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the file is readable by you")]),s._v("\n-s FILE "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the file exists and it's not empty")]),s._v("\n-w FILE "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the file is writable by you")]),s._v("\n-x FILE "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the file is executable by you")]),s._v("\n")])])]),a("p",[s._v("String operators:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("-z STRING "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the string is empty")]),s._v("\n-n STRING "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the string is not empty")]),s._v("\nSTRING1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" STRING2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the strings are equal")]),s._v("\nSTRING1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" STRING2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the strings are not equal")]),s._v("\n")])])]),a("p",[s._v("Arithmetic tests:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("arg1 -eq arg2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the arguments are equal")]),s._v("\narg1 -ne arg2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the arguments are not equal")]),s._v("\narg1 -lt arg2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if the arg1 is less than arg2")]),s._v("\narg1 -le arg2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if arg1 is less than or equal to arg2")]),s._v("\narg1 -gt arg2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if arg1 is greater than arg2")]),s._v("\narg1 -ge arg2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#True if arg1 is greater than or equal to arg2")]),s._v("\n")])])]),a("h2",{attrs:{id:"if-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-statements"}},[s._v("#")]),s._v(" If statements")]),s._v(" "),a("p",[s._v("Syntax:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("condition-is-true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("another-condition-true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n            elifCommand "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        altCommand "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        altCommand n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])])]),a("p",[s._v("Example:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MY_SHELL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zsh"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$MY_SHELL")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zsh"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You are the zsh shell user!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No zsh :("')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])])]),a("p",[s._v("It's best practice to enclose variables in quotes to prevent some unexpected side effects.")]),s._v(" "),a("h2",{attrs:{id:"for-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-loop"}},[s._v("#")]),s._v(" For loop")]),s._v(" "),a("p",[s._v("Syntax:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("VARIABLE_NAME")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" ITEM_1 ITEM_N\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("p",[s._v("Example:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#! /bin/zsh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("COLOR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" red gree blue\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Color: '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$COLOR")]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("p",[s._v("It's also common for the list of items to be stored in variable like this: "),a("code",[s._v('COLORS="red green blue"')])]),s._v(" "),a("h2",{attrs:{id:"positional-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#positional-parameters"}},[s._v("#")]),s._v(" Positional parameters")]),s._v(" "),a("p",[s._v("Those are variables that contains the content of the command line")]),s._v(" "),a("p",[a("code",[s._v("script.sh param1 param2 param3")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"script.sh"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param3"')]),s._v("\n")])])]),a("p",[s._v("An practical example can be found in "),a("a",{attrs:{href:"./archiveUser.sh"}},[s._v("archiveUser.sh")]),s._v(" We can use "),a("code",[s._v("$@")]),s._v(" sign when we want to loop through script parameters:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("USER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This will loop through all parameter passed to the script when executed")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("passwd")]),s._v(" -l "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$USER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# lock the account")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("h2",{attrs:{id:"accepting-user-input-stdin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accepting-user-input-stdin"}},[s._v("#")]),s._v(" Accepting User Input (STDIN)")]),s._v(" "),a("p",[s._v("The "),a("code",[s._v("read")]),s._v(" command accepts STDIN")]),s._v(" "),a("p",[s._v("Syntax: "),a("code",[s._v('read -p "PROMPT" VARIABLE')]),s._v(" Example:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" -p "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Enter a user name: "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Archiving user: '),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$USER")]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),a("h2",{attrs:{id:"exit-statuses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exit-statuses"}},[s._v("#")]),s._v(" Exit statuses")]),s._v(" "),a("p",[s._v("Every time the script or command is executed it returns an exit status in range of 0 to 255. De facto status for success is "),a("code",[s._v("0")]),s._v(", all others are codes for an error condition. This codes can be used in scripts for error checking. We can find what various exit statuses mean we can check documentation for that error code, or look into source code.")]),s._v(" "),a("p",[s._v("We can use "),a("code",[s._v("$?")]),s._v(" to check the exit status of the previously executed command.")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /dir\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n")])])]),a("p",[s._v("If dir exists "),a("code",[s._v("echo $?")]),s._v(" will return "),a("code",[s._v("0")]),s._v(" status code, otherwise it should return "),a("code",[s._v("2")]),s._v(", error code for directory not found. An practical example can be found in "),a("a",{attrs:{href:"./checkConnection.sh"}},[s._v("checkConnection.sh")]),s._v(".")]),s._v(" "),a("p",[s._v("We can explicitly define the return codes with "),a("code",[s._v("exit")]),s._v(" command:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\netc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),a("p",[s._v("Simply use the "),a("code",[s._v("exit")]),s._v(" command in your script and follow it with the integer in range of 0 to 255. If we do not specify the return code with the "),a("code",[s._v("exit")]),s._v(" command, then the exit status of the previously executed command in the shellscript will be used as the exit status. This is also true if we do not include "),a("code",[s._v("exit")]),s._v(" command at all. Whenever the "),a("code",[s._v("exit")]),s._v(" command is reached the shellscript will stop running.")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("HOST")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"google.com"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" -c "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$HOST")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v(" -ne "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$HOST")]),s._v(' unreachable"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),a("h2",{attrs:{id:"and"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#and"}},[s._v("#")]),s._v(" && AND ||")]),s._v(" "),a("p",[s._v("We can chain together multiple commands with this logical operators.")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("&& = AND")]),s._v(" "),a("code",[s._v("mkdir /tmp/bak && cp test.txt /tmp/bak")]),s._v(" The command following "),a("code",[s._v("&&")]),s._v(" will always be executed if the previous command succeeds(aka exits with "),a("code",[s._v("0")]),s._v(" exit status).")]),s._v(" "),a("li",[a("code",[s._v("|| = OR")]),s._v(" "),a("code",[s._v("cp test.txt /tmp/bak || cp test.txt /tmp")]),s._v(" On the other hand, the command following the "),a("code",[s._v("||")]),s._v(" will only execute if the previous command fails(aka exits with non-zero exit status).")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#! /bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("HOST")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"google.com"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" -c "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$HOST")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$HOST")]),s._v(' reachable."')]),s._v("\n")])])]),a("h2",{attrs:{id:"the-semicolon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-semicolon"}},[s._v("#")]),s._v(" The semicolon")]),s._v(" "),a("p",[s._v("If we want to ensure that all commands will be executed we can separate them with "),a("code",[s._v(";")]),s._v(": "),a("code",[s._v("cp test.txt /tmp/bak/ ; cp test.txt /tmp/")]),s._v(" This is basically same as running this two commands on separate lines.")]),s._v(" "),a("p",[s._v("It's important to note that "),a("code",[s._v("semicolon")]),s._v(" does not check for exit statuses of the executed commands. The command following "),a("code",[s._v(";")]),s._v(" will be always executed no matter if the previous command fails or succeeds.")]),s._v(" "),a("h2",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[s._v("#")]),s._v(" Functions")]),s._v(" "),a("p",[s._v("For functions we can say that they're shellscripts within shellscript.")]),s._v(" "),a("p",[s._v("One of the main reasons why we are using functions is to follow the DRY principle, which means that we should write function once, and then we can use it many times. This can sometimes drastically reduce the script length, and also it's much easier to maintain as we have single function to edit and troubleshoot.")]),s._v(" "),a("h3",{attrs:{id:"creating-a-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-function"}},[s._v("#")]),s._v(" Creating a function")]),s._v(" "),a("p",[s._v("It's important to note that function must be defined before it's called. We can pass parameters to the functions, and then access those params inside of the function. There are two ways to create a function in the shellscript:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" function-"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Code")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# function keyword is optional")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# so this is also correct")]),s._v("\nanother-"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Another code")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h3",{attrs:{id:"calling-a-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#calling-a-function"}},[s._v("#")]),s._v(" Calling a function")]),s._v(" "),a("p",[s._v("To call or execute the function we can simply list it's name in the script (after it's being defined ofc):")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World!"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nhello\n")])])]),a("p",[s._v("Functions can call other functions, you can see an example in "),a("a",{attrs:{href:"./functions.sh"}},[s._v("functions.sh")]),s._v(". You can see there that the "),a("code",[s._v("hello")]),s._v(" function calls "),a("code",[s._v("now")]),s._v(" function before it's declared, but that's okay as the "),a("code",[s._v("now")]),s._v(" function gets read into the script before the "),a("code",[s._v("hello")]),s._v(" function is called, so in the order of the execution it's defined before it's used. For example something like this wont work:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    now\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nhello "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# hello is called before now is defined")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" +%r"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("Functions also have "),a("code",[s._v("positional parameters")]),s._v(", and "),a("code",[s._v("$@")]),s._v(" also contains the list of all parameters.")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $0 is the script itself, not the function name")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nhello Shell World\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Output: Hello Shell World")]),s._v("\n")])])]),a("p",[s._v("Functions also have access to all global variables.")]),s._v(" "),a("h3",{attrs:{id:"function-exit-statuses-aka-return-codes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-exit-statuses-aka-return-codes"}},[s._v("#")]),s._v(" Function exit statuses aka return codes")]),s._v(" "),a("p",[s._v("All functions have an exit status. We can explicitly return status within function with "),a("code",[s._v("return")]),s._v(" keyword:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# return code")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("Or status can be returned implicitly with the exit status of the last command executed in the function")]),s._v(" "),a("p",[s._v("All exit status rules are the same as the status rules we've explored so far.")]),s._v(" "),a("h2",{attrs:{id:"wildcards"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wildcards"}},[s._v("#")]),s._v(" Wildcards")]),s._v(" "),a("p",[s._v("A Wildcard is a character or string used for pattern matching. We can use them to create search patterns that when expanded will return the list of matching files and directories. They can be used with the most commands, like "),a("code",[s._v("ls")]),s._v(", "),a("code",[s._v("rm")]),s._v(", "),a("code",[s._v("mv")]),s._v(", "),a("code",[s._v("cp")]),s._v(" and others.")]),s._v(" "),a("p",[s._v("Wildcards are sometimes referred to as "),a("code",[s._v("globbs")]),s._v(" or "),a("code",[s._v("globb")]),s._v(" patterns, "),a("code",[s._v("globbing")]),s._v(" is the act of expanding wildcard into the list of the matching files and directories.")]),s._v(" "),a("p",[s._v("They are great when we need to work with a specific group of the files or directories.")]),s._v(" "),a("p",[s._v("Here are the two main wildcards:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# * - matches zero or more characters, we can say that this matches anything")]),s._v("\n*.txt  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Select all files with txt extension")]),s._v("\na*     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Select all files that start with the letter a")]),s._v("\na*.txt "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Selects all files that starts with letter a nad are txt files")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ? - matches exactly one character")]),s._v("\n?.txt  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Selects all files that have exactly one character preceding .txt")]),s._v("\na?     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Selects all two letter files that starts with char a")]),s._v("\na?.txt "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Selects all two letter files that starts with a and are txt files")]),s._v("\n")])])]),a("h2",{attrs:{id:"character-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#character-classes"}},[s._v("#")]),s._v(" Character Classes")]),s._v(" "),a("p",[a("code",[s._v("[]")]),s._v(" is a character class. It matches any, but only one, of the characters included between the brackets: "),a("code",[s._v("[aeiou]")]),s._v(" "),a("code",[s._v("ca[nt]*")]),s._v(" - matches, for example: can, candy, catch, cat")]),s._v(" "),a("p",[s._v("We can also exclude characters in the match with "),a("code",[s._v("[!]")]),s._v(": "),a("code",[s._v("[!aeiou]*")]),s._v(" - This matches all files that don't start with a vowel, for example: config, data, list etc.")]),s._v(" "),a("p",[s._v("We can also create ranges in character class with "),a("code",[s._v("[a-d]*")]),s._v(" for example. This matches all files that start with a, b, c or d. "),a("code",[s._v("[1-3]*")]),s._v(" matches all files that start with 1, 2 or 3.")]),s._v(" "),a("p",[s._v("Instead of creating custom ranges we can also use predefined named character classes. Those represents the most commonly used ranges:")]),s._v(" "),a("ul",[a("li",[s._v("[[:alpha:]] - Matches alphabetic letters, both lower and uppercase")]),s._v(" "),a("li",[s._v("[[:alnum:]] - Matches alphanumeric characters")]),s._v(" "),a("li",[s._v("[[:digit:]] - Matches numbers in decimal from 0 to 9")]),s._v(" "),a("li",[s._v("[[:lower:]] - matches any lowercase letters")]),s._v(" "),a("li",[s._v("[[:upper:]] - matches whitespace")]),s._v(" "),a("li",[s._v("[[:space:]] - matches any uppercase letters")])]),s._v(" "),a("p",[s._v("If we want to match a wildcard character we can escape it with "),a("code",[s._v("\\")]),s._v(" escape character. "),a("code",[s._v("*\\?")]),s._v(" - Match all files that end with the question mark")]),s._v(" "),a("p",[s._v("Just for sanity stay away from naming files with * or ?.")]),s._v(" "),a("p",[s._v("An practical example:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#! /bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ./src/components\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("FILE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" *.jsx "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this can be also ./src/components/*.jsx")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Copying '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v('"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILE")]),s._v(" ./just-jsx\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("h2",{attrs:{id:"case-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#case-statements"}},[s._v("#")]),s._v(" Case statements")]),s._v(" "),a("p",[s._v("Case statements are the alternative to if statements, as they are sometimes easier to read. One common place for case statements use are a system startup scripts. Syntax:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$VAR")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n    pattern_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Some commands here.")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Execution will stop when double semicolon is reached (somethin' like a break in js)")]),s._v("\n    pattern_n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Some commands here.")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n")])])]),a("p",[s._v("Example:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n    start"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("START"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# We can use single | here as an OR")]),s._v("\n        /usr/sbin/sshd\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    stop"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("STOP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" var/run/sshd.pid"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this will act as a catch all and will match anything else")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Usage: '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v(' start|stop"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n")])])]),a("p",[s._v("Note that the patterns are case sensitive.")]),s._v(" "),a("h2",{attrs:{id:"logging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[s._v("#")]),s._v(" Logging")]),s._v(" "),a("p",[s._v("You may want to keep record of what's happening during the execution of the shellscript. "),a("strong",[s._v("Logs should answer who, what, when, where and why.")])]),s._v(" "),a("p",[s._v("Linux OS uses the "),a("code",[s._v("syslog")]),s._v(" standard for the message logging. This allows programs and applications to generate messages that can be captured, processed and stored by the system logger. This eliminates need for each and every application having to implement a logging mechanism. This means that we can take advantage of this logging system in shellscripts.")]),s._v(" "),a("p",[s._v("The "),a("code",[s._v("syslog")]),s._v(" standard uses facilities and severities to categorize messages.")]),s._v(" "),a("ul",[a("li",[s._v("Facilities: kern, user, mail, daemon, auth, local0 to local7")]),s._v(" "),a("li",[s._v("Severities (ordered by severity): emerg, alert, crit, err, warning, notice, info, debug")])]),s._v(" "),a("p",[s._v("Each message is labeled with the facility code and severity level.Facilities are used to determine from what type of program or part of the system message originates from.")]),s._v(" "),a("h2",{attrs:{id:"while-loops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-loops"}},[s._v("#")]),s._v(" While loops")]),s._v(" "),a("p",[s._v("A while loop is a loop that repeats series of commands as long as the condition is true.")]),s._v(" "),a("p",[s._v("Syntax:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("condition-is-true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("p",[s._v("Example:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("INDEX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$INDEX")]),s._v(" -lt "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Creating file-'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${INDEX}")]),s._v('"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" /usr/local/project/file-"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${INDEX}")]),s._v(".txt\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v("INDEX"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is called arithmetic expansion. We can enclose math expressions inside double ()")]),s._v("\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CORRECT")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" -p "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Enter your name: "')]),s._v(" NAME\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" -p "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Is '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${NAME}")]),s._v(' correct? "')]),s._v(" CORRECT\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Check if server is online")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" -c "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" App "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/dev/null\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"App still upp!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"App is down, continue"')]),s._v("\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Read a file line, by line")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("LINE_NUM")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" LINE\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${LINE_NUM}")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${LINE}")]),s._v('"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v("LINE_NUM"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" /etc/fstab\n")])])]),a("p",[s._v("Condition can be any command, and if command exits with the status code of "),a("code",[s._v("0")]),s._v(" then the while loop will continue. When command fails and return non-zero exit status, the condition is false and while loop stops.")]),s._v(" "),a("p",[s._v("We can make infinite loop on purpose, this can be useful for a service tasks for example, and will be running in the background until it's killed.")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" N\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("p",[s._v("We can exit the loop before it's normal ending by using "),a("code",[s._v("break")]),s._v(" statement. This exits the loop, but doesn't exits the script, so the script will continue executing.")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" -p "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1: Show disk usage. 2: Show uptime. "')]),s._v(" CHOICE\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CHOICE")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v(" -h\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uptime")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("break")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),a("p",[s._v("We can also use "),a("code",[s._v("continue")]),s._v(" statement if we want to skip over commands that are after "),a("code",[s._v("continue")]),s._v(". Exectuion continues back at the top of the loop and the while condition is examined again.")]),s._v(" "),a("h2",{attrs:{id:"debugging-shellscript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging-shellscript"}},[s._v("#")]),s._v(" Debugging shellscript")]),s._v(" "),a("p",[s._v("There are options built-in into "),a("code",[s._v("bash")]),s._v(" that can help with debugging and fixing errors in shellscripts.")]),s._v(" "),a("p",[s._v("We can provide the first line in our script that starts with "),a("code",[s._v("#!")]),s._v(" one or more modifiers, for example: "),a("code",[s._v("#! /bin/bash -x")]),s._v(", this is called "),a("code",[s._v("x-trace")]),s._v(" or "),a("code",[s._v("tracing")]),s._v(" and will print commands as they execute. We can run this via command line with "),a("code",[s._v("set -x")]),s._v(" command, and to stop we can run "),a("code",[s._v("set +x")]),s._v(".")]),s._v(" "),a("p",[s._v("We can turn debugging on just for the portion of our script:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("TEST_VAR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"TEST123"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -x\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$TEST_VAR")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" +x\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hostname")]),s._v("\n")])])]),a("p",[s._v("Another useful option that can help with finding errors in shellscripts is the "),a("code",[s._v("-e")]),s._v(" option. It causes your script to exit immediately if the command exits with a non-zero exit status. It can be combined with other options, like: "),a("code",[s._v("#! /bin/bash -x -e")]),s._v(" or "),a("code",[s._v("#! /bin/bash -ex")]),s._v(", order is not important.")]),s._v(" "),a("p",[s._v("Yet another useful option is "),a("code",[s._v("-v")]),s._v(" which prints shell input lines as they are read. This one can be combined with other options, too.")]),s._v(" "),a("p",[s._v("For more helpers we can run "),a("code",[s._v("help -set | less")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"debugging-startup-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging-startup-time"}},[s._v("#")]),s._v(" Debugging startup time")]),s._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/Programming/Shell/troubleshooting_startup_time.html"}},[s._v("Troubleshooting zsh startup time")])],1)]),s._v(" "),a("h2",{attrs:{id:"reference-related"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference-related"}},[s._v("#")]),s._v(" Reference/Related")]),s._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/blog/shellscripting.html"}},[s._v("Shellscripting")])],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);