(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{473:function(s,t,e){"use strict";e.r(t);var a=e(42),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"fsm-fullstack-notes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fsm-fullstack-notes"}},[s._v("#")]),s._v(" [FSM] FullStack notes")]),s._v(" "),e("h2",{attrs:{id:"managing-servers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#managing-servers"}},[s._v("#")]),s._v(" Managing servers")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" -i .ssh/id_rsa darko@167.99.240.236\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -i stands for identity, we're providing an ssh key here as access token to server")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# darko is the name of the user, and ip address is self explanatory.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# here I say that I want to login as user darko to server at this ip address using this ssh key")]),s._v("\n")])])]),e("p",[s._v("On VPS creation update distro (apt update && apt upgrade, if ubuntu), and create a new user(s):")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" update "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" upgrade\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ...")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# create new user")]),s._v("\nadduser "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$USERNAME")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# add user to sudo group")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("usermod")]),s._v(" -aG "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$USERNAME")]),s._v("\n")])])]),e("p",[s._v("You can switch between users by using "),e("code",[s._v("su")]),s._v(" command:")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("su")]),s._v(" darko\n")])])]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" .ssh/id_rsa.pub "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" darko@167.99.240.236 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"')]),s._v("\n")])])]),e("p",[s._v("Simple shellscript to add ssh key from local machine to authorized keys on server. After setting up this (doublecheck!), disable root login and in disable password login "),e("code",[s._v("/etc/ssh/sshd_config")]),s._v(". Always use ssh!")]),s._v(" "),e("p",[s._v("If you have a domain you can map domain name to server IP address by adding "),e("code",[s._v("A Record")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://www.dropbox.com/s/2h8m23kalng62ov/Screenshot%202019-09-20%2021.22.40.png?dl=0",alt:"Example"}})]),s._v(" "),e("blockquote",[e("p",[s._v("The A record maps a name to one or more IP addresses, when the IP are known and stable. The CNAME record maps a name to another name.")])]),s._v(" "),e("h2",{attrs:{id:"nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[s._v("#")]),s._v(" Nginx")]),s._v(" "),e("blockquote",[e("p",[s._v("A HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server")])]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# you can read default nginx config here")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("less")]),s._v(" /etc/nginx/sites-available/default\n")])])]),e("p",[s._v("Start up nginx service:")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" nginx start\n")])])]),e("p",[s._v("We can reroute traffic to particular port by editing `location /`` part of the config to look something like this:")]),s._v(" "),e("div",{staticClass:"language-conf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("location / {\n    proxy_pass http://127.0.0.1:3001/;\n}\n")])])]),e("h2",{attrs:{id:"server-security"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#server-security"}},[s._v("#")]),s._v(" Server security")]),s._v(" "),e("blockquote",[e("p",[s._v("Disable root login and in disable password login "),e("code",[s._v("/etc/ssh/sshd_config")]),s._v(". And always use ssh! Add trusted (public) ssh keys to "),e("code",[s._v(".ssh/authorized_keys")]),s._v(" for all users with acess to the server. "),e("code",[s._v("nmap")]),s._v(" is an usefull tool to see what ports are open on your server")])]),s._v(" "),e("p",[s._v("We can use "),e("code",[s._v("iptables")]),s._v(" to configure network rules:")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" iptables -A INPUT -p tcp --dport "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" -j ACCEPT\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# where:")]),s._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -A append rule")]),s._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -p protocol (tcp, icmp)")]),s._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --dport destination port")]),s._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -j jump (DROP, REJECT, ACCEPT, LOG)")]),s._v("\n")])])]),e("p",[s._v("Examples:")]),s._v(" "),e("p",[e("code",[s._v("iptables")]),s._v(" rule to block all outgoing HTTP connections:")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("iptables -A OUTPUT -p tcp --dport "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" -j REJECT\n")])])]),e("p",[s._v("An "),e("code",[s._v("iptables")]),s._v(" rule to only allow icmp connections on port 892 from the IP address 192.0.0.1:")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("iptables -A INPUT -s "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.0")]),s._v(".0.1 -p icmp --dport "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("892")]),s._v(" -j ACCEPT\n")])])]),e("p",[s._v("A better way to control ports on server than "),e("code",[s._v("iptables")]),s._v(" is "),e("code",[s._v("ufw")]),s._v(".")]),s._v(" "),e("p",[s._v("ufw rule to block all outgoing HTTP connections:")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("ufw reject out http\n")])])]),e("h3",{attrs:{id:"automatic-updates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#automatic-updates"}},[s._v("#")]),s._v(" Automatic Updates")]),s._v(" "),e("p",[s._v("For Ubuntu:")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" unattended-upgrades\n")])])]),e("p",[s._v("This lib is going to take care of keeping software up to date. To configure it edit this file "),e("code",[s._v("/etc/apt/apt.conf.d/20auto-upgrades")]),s._v(" (Ubuntu).")]),s._v(" "),e("p",[s._v("This are defaults (1 stands for yes):")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("APT::Periodic::Update-Package-Lists "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nAPT::Periodic::Unattended-Upgrade "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),e("p",[s._v("We can set up what upgrades/updates we want to keep our eye on in this config "),e("code",[s._v("/etc/apt/apt.conf.d/50unattended-upgrades")]),s._v(". Usually we want only security updates for servers.")]),s._v(" "),e("h3",{attrs:{id:"fail2ban"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fail2ban"}},[s._v("#")]),s._v(" Fail2ban")]),s._v(" "),e("p",[s._v("Fail2ban scans auth.log file, and have rules that are blocking users from ip addresses that fail to login several times. This is particularly useful against server-farms in China trying to bruteforce break into the servers. For example, if user prom an ip address fails to login 3 times in the row, he'll be blocked from trying again for the next hour, etc.")]),s._v(" "),e("blockquote",[e("p",[s._v("If you misconfigure fail2ban, you can lock yourself out of your server!!!")])]),s._v(" "),e("p",[s._v("Ubuntu setup:")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" fail2ban "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Install fail2ban")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" /etc/fail2ban/jail.conf /etc/fail2ban/jail.local "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy jail conf as local configuration. Any changes made to jail.local will override jail.conf.")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" /etc/fail2ban/jail.local "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Edit conf if needed")]),s._v("\n")])])]),e("h2",{attrs:{id:"shellscripting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shellscripting"}},[s._v("#")]),s._v(" Shellscripting")]),s._v(" "),e("p",[e("code",[s._v("find")]),s._v(" search file names")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" /bar -name foo.txt\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# find all log files inside var/log dir")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" /var/log -type f -name *.log\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# find all empty files in /etc")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" /etc -type f -empty\n")])])]),e("p",[e("code",[s._v("grep")]),s._v(" search file contents")]),s._v(" "),e("h3",{attrs:{id:"redirection-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redirection-operators"}},[s._v("#")]),s._v(" Redirection operators")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://www.dropbox.com/s/xu4kdpdjkjecrdr/Screenshot%202019-09-22%2012.48.01.png",alt:"Redirection operators cheatsheet"}})]),s._v(" "),e("h3",{attrs:{id:"npm-scripts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-scripts"}},[s._v("#")]),s._v(" NPM scripts")]),s._v(" "),e("p",[s._v("To make a local node script available to whole system just run "),e("code",[s._v("npm i -g")]),s._v(" inside the directory where the script is. You'll need add first "),e("code",[s._v("bin")]),s._v(" field to package.json and put your scripts there. (mind blown)")]),s._v(" "),e("h2",{attrs:{id:"http-certificates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-certificates"}},[s._v("#")]),s._v(" HTTP Certificates")]),s._v(" "),e("blockquote",[e("p",[s._v("The easiest way to make your site secure is through "),e("a",{attrs:{href:"https://github.com/certbot/certbot",target:"_blank",rel:"noopener noreferrer"}},[s._v("Certbot"),e("OutboundLink")],1),s._v(". A bit complicated walkthrough for setting up certificates can be found "),e("a",{attrs:{href:"https://github.com/diafygi/acme-tiny",target:"_blank",rel:"noopener noreferrer"}},[s._v("here"),e("OutboundLink")],1),s._v(". In the end, we are using "),e("a",{attrs:{href:"https://letsencrypt.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Let's Encrypt"),e("OutboundLink")],1),s._v(" certificates.")])]),s._v(" "),e("p",[s._v("Certbot setup:")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" add-apt-repository ppa:certbot/certbot "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Add the certbot repository")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" update "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Pull in new repository information")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" python-certbot-nginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Install certbot with nginx plugin")]),s._v("\n")])])]),e("blockquote",[e("p",[s._v("Make sure that your 80/tcp port is open, otherwise cert challenge is going to fail")])]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" certbot --nginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Use certbot to get certificate")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" certbot renew --dry-run "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Test auto renew")]),s._v("\n")])])]),e("h2",{attrs:{id:"cron-jobs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cron-jobs"}},[s._v("#")]),s._v(" Cron jobs")]),s._v(" "),e("blockquote",[e("p",[s._v("Periodic tasks")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://www.dropbox.com/s/zlanj02uu8rp24g/Screenshot%202019-09-22%2017.00.18.png",alt:"Cron job example"}})]),s._v(" "),e("p",[s._v("Useful tool: crontab.guru")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("crontab")]),s._v(" -e "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Open crontab for editing")]),s._v("\n\n00 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" * * "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" certbot renew "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Renew certificate every week at 12pm on Monday")]),s._v("\n")])])]),e("h2",{attrs:{id:"caching"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#caching"}},[s._v("#")]),s._v(" Caching")]),s._v(" "),e("p",[s._v("We can set expires headers for static assets in our nginx config:")]),s._v(" "),e("div",{staticClass:"language-conf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" location /static/ {\n                expires 30d;\n                proxy_pass http://127.0.0.1:3001/static/;\n}\n")])])]),e("p",[s._v("Tho, 30d days of cashing is not the best practice, as user is going to see latest changes in 30 days if update happens meanwhile they are in caching period (or do hard refresh, but explain that to a common user). It should be set in hours or eventually days for assets that is known that is not going to change.")]),s._v(" "),e("p",[s._v("We can also use server side caching with nginx (Example: take look at nginx slowfile route caching config at dtasevski.xyz). Take care of long cache values, client can't request new assets even with hard reload when the cache is on the server.")])])}),[],!1,null,null,null);t.default=n.exports}}]);